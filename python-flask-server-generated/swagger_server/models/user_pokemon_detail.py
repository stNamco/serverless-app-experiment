# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserPokemonDetail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_and_pokemon_relationship_id: str=None, user_id: str=None, pokemon_id: int=None, created_at: str=None):  # noqa: E501
        """UserPokemonDetail - a model defined in Swagger

        :param user_and_pokemon_relationship_id: The user_and_pokemon_relationship_id of this UserPokemonDetail.  # noqa: E501
        :type user_and_pokemon_relationship_id: str
        :param user_id: The user_id of this UserPokemonDetail.  # noqa: E501
        :type user_id: str
        :param pokemon_id: The pokemon_id of this UserPokemonDetail.  # noqa: E501
        :type pokemon_id: int
        :param created_at: The created_at of this UserPokemonDetail.  # noqa: E501
        :type created_at: str
        """
        self.swagger_types = {
            'user_and_pokemon_relationship_id': str,
            'user_id': str,
            'pokemon_id': int,
            'created_at': str
        }

        self.attribute_map = {
            'user_and_pokemon_relationship_id': 'userAndPokemonRelationshipId',
            'user_id': 'userId',
            'pokemon_id': 'pokemonId',
            'created_at': 'createdAt'
        }
        self._user_and_pokemon_relationship_id = user_and_pokemon_relationship_id
        self._user_id = user_id
        self._pokemon_id = pokemon_id
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'UserPokemonDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserPokemonDetail of this UserPokemonDetail.  # noqa: E501
        :rtype: UserPokemonDetail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_and_pokemon_relationship_id(self) -> str:
        """Gets the user_and_pokemon_relationship_id of this UserPokemonDetail.


        :return: The user_and_pokemon_relationship_id of this UserPokemonDetail.
        :rtype: str
        """
        return self._user_and_pokemon_relationship_id

    @user_and_pokemon_relationship_id.setter
    def user_and_pokemon_relationship_id(self, user_and_pokemon_relationship_id: str):
        """Sets the user_and_pokemon_relationship_id of this UserPokemonDetail.


        :param user_and_pokemon_relationship_id: The user_and_pokemon_relationship_id of this UserPokemonDetail.
        :type user_and_pokemon_relationship_id: str
        """
        if user_and_pokemon_relationship_id is None:
            raise ValueError("Invalid value for `user_and_pokemon_relationship_id`, must not be `None`")  # noqa: E501

        self._user_and_pokemon_relationship_id = user_and_pokemon_relationship_id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this UserPokemonDetail.


        :return: The user_id of this UserPokemonDetail.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this UserPokemonDetail.


        :param user_id: The user_id of this UserPokemonDetail.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def pokemon_id(self) -> int:
        """Gets the pokemon_id of this UserPokemonDetail.


        :return: The pokemon_id of this UserPokemonDetail.
        :rtype: int
        """
        return self._pokemon_id

    @pokemon_id.setter
    def pokemon_id(self, pokemon_id: int):
        """Sets the pokemon_id of this UserPokemonDetail.


        :param pokemon_id: The pokemon_id of this UserPokemonDetail.
        :type pokemon_id: int
        """

        self._pokemon_id = pokemon_id

    @property
    def created_at(self) -> str:
        """Gets the created_at of this UserPokemonDetail.


        :return: The created_at of this UserPokemonDetail.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this UserPokemonDetail.


        :param created_at: The created_at of this UserPokemonDetail.
        :type created_at: str
        """

        self._created_at = created_at
