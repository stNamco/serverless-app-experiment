# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.pokemon import Pokemon  # noqa: F401,E501
from swagger_server import util


class UserDetail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, user_id: str=None, pokemons: List[Pokemon]=None):  # noqa: E501
        """UserDetail - a model defined in Swagger

        :param name: The name of this UserDetail.  # noqa: E501
        :type name: str
        :param user_id: The user_id of this UserDetail.  # noqa: E501
        :type user_id: str
        :param pokemons: The pokemons of this UserDetail.  # noqa: E501
        :type pokemons: List[Pokemon]
        """
        self.swagger_types = {
            'name': str,
            'user_id': str,
            'pokemons': List[Pokemon]
        }

        self.attribute_map = {
            'name': 'name',
            'user_id': 'userId',
            'pokemons': 'pokemons'
        }
        self._name = name
        self._user_id = user_id
        self._pokemons = pokemons

    @classmethod
    def from_dict(cls, dikt) -> 'UserDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserDetail of this UserDetail.  # noqa: E501
        :rtype: UserDetail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this UserDetail.


        :return: The name of this UserDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UserDetail.


        :param name: The name of this UserDetail.
        :type name: str
        """

        self._name = name

    @property
    def user_id(self) -> str:
        """Gets the user_id of this UserDetail.


        :return: The user_id of this UserDetail.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this UserDetail.


        :param user_id: The user_id of this UserDetail.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def pokemons(self) -> List[Pokemon]:
        """Gets the pokemons of this UserDetail.


        :return: The pokemons of this UserDetail.
        :rtype: List[Pokemon]
        """
        return self._pokemons

    @pokemons.setter
    def pokemons(self, pokemons: List[Pokemon]):
        """Sets the pokemons of this UserDetail.


        :param pokemons: The pokemons of this UserDetail.
        :type pokemons: List[Pokemon]
        """

        self._pokemons = pokemons
